import os
import json
import smtplib
from email.mime.text import MIMEText
from datetime import datetime
from flask import Flask, render_template, request, redirect, url_for, flash

# Configurações de e-mail
EMAIL = "elieserjunior97@gmail.com"
SENHA = "SUA_SENHA_DE_APLICATIVO"

# Caminho do arquivo JSON
CAMINHO_ARQUIVO = os.path.join(os.getcwd(), "agendamentos.json")

# Função para carregar os agendamentos
def carregar_agendamentos():
    try:
        with open(CAMINHO_ARQUIVO, "r") as f:
            data = json.load(f)
            return {tuple(eval(k)): v for k, v in data.items()}
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

# Função para salvar os agendamentos
def salvar_agendamentos(agendamentos):
    try:
        agendamentos_serializado = {str(k): v for k, v in agendamentos.items()}
        with open(CAMINHO_ARQUIVO, "w") as f:
            json.dump(agendamentos_serializado, f, indent=4)
    except Exception as e:
        print(f"Erro ao salvar agendamentos: {e}")

# Lista de horários e serviços
horarios = [f"{h:02d}:{m:02d}" for h in range(8, 20) for m in (0, 30)]
servicos = {
    "Tradicional": 15,
    "Social": 18,
    "Degradê": 23,
    "Navalhado": 25,
    "Pezim": 5,
    "Barba": 15,
}

# Inicializando o Flask
app = Flask(__name__)
app.secret_key = "supersecretkey"
agendamentos = carregar_agendamentos()

@app.route("/", methods=["GET", "POST"])
def home():
    if request.method == "POST":
        nome = request.form.get("nome")
        telefone = request.form.get("telefone")
        data = request.form.get("data")
        horario = request.form.get("horario")
        servicos_escolhidos = request.form.getlist("servicos")
        
        if not nome or not telefone:
            flash("Nome e telefone são obrigatórios!", "error")
            return redirect(url_for("home"))
        
        if len(servicos_escolhidos) == 0:
            flash("Escolha pelo menos um serviço!", "error")
            return redirect(url_for("home"))
        
        if len(servicos_escolhidos) > 2:
            flash("Você pode escolher no máximo 2 serviços!", "error")
            return redirect(url_for("home"))
        
        if (data, horario) in agendamentos:
            flash("Este horário já está ocupado!", "error")
            return redirect(url_for("home"))
        
        agendamentos[(data, horario)] = (nome, telefone, servicos_escolhidos)
        salvar_agendamentos(agendamentos)
        enviar_email("Agendamento Confirmado", f"Seu agendamento foi confirmado para {data} às {horario}.")
        flash("Agendamento realizado com sucesso!", "success")
        
    return render_template("index.html", horarios=horarios, servicos=servicos)

@app.route("/cancelar", methods=["POST"])
def cancelar():
    data = request.form.get("data")
    horario = request.form.get("horario")
    nome = request.form.get("nome")
    telefone = request.form.get("telefone")
    
    if (data, horario) not in agendamentos:
        flash("Não há agendamentos neste horário.", "error")
    elif agendamentos[(data, horario)][:2] != (nome, telefone):
        flash("Nome ou telefone não correspondem ao agendamento.", "error")
    else:
        del agendamentos[(data, horario)]
        salvar_agendamentos(agendamentos)
        enviar_email("Agendamento Cancelado", f"Seu agendamento para {data} às {horario} foi cancelado.")
        flash("Agendamento cancelado com sucesso!", "success")
    
    return redirect(url_for("home"))

def enviar_email(assunto, mensagem):
    try:
        msg = MIMEText(mensagem)
        msg['Subject'] = assunto
        msg['From'] = EMAIL
        msg['To'] = EMAIL
        
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(EMAIL, SENHA)
        server.sendmail(EMAIL, EMAIL, msg.as_string())
        server.quit()
    except Exception as e:
        print(f"Erro ao enviar e-mail: {e}")

from waitress import serve
from app import app  # Substitua 'app' pelo nome da sua instância Flask, se for diferente

if __name__ == "__main__":
    serve(app, host='0.0.0.0', port=5000)
